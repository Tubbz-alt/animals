/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__modules_app__ = __webpack_require__(1);


(function () {
  Object(__WEBPACK_IMPORTED_MODULE_0__modules_app__["a" /* default */])('Pet Sounds');
})();

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__screen__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animals__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__animals___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__animals__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__zoo__ = __webpack_require__(4);
var _this = this;

// if ('serviceWorker' in navigator) {
//   navigator.serviceWorker.register('/sw.js')
//   .then(function(reg) {
//     // registration worked
//     console.log('Registration succeeded. Scope is ' + reg.scope)
//   }).catch(function(error) {
//     // registration failed
//     console.log('Registration failed with ' + error)
//   })
// }





var screen = new __WEBPACK_IMPORTED_MODULE_0__screen__["a" /* default */]();
var animals = __WEBPACK_IMPORTED_MODULE_1__animals___default.a;
var zoo = new __WEBPACK_IMPORTED_MODULE_2__zoo__["a" /* default */](animals);

function BuildApp(name) {
  this.name = name;
  this.started = false;
  this.thumbPath = '/images/animals';

  this.app = document.querySelector('.animal');
  this.animalName = document.querySelector('.animal .name');
  this.instructions = document.querySelector('.animal .instructions');
  this.thumbBox = document.querySelector('.thumb-box');
  this.btnStart = document.querySelector('.start-app');
  this.btnShuffle = document.querySelector('.shuffle');
  this.playerWord = document.querySelector('.player-word');
  this.playerSound = document.querySelector('.player-sound');

  var obj = this;
  this.init(obj);
}

BuildApp.prototype = {
  init: function init(obj) {
    screen.init();

    obj.eManage = obj.manageInitialEvents.bind(_this, obj);

    window.addEventListener('keyup', obj.eManage, false);

    obj.btnStart.addEventListener('click', function () {
      if (!obj.started) {
        obj.start(obj);
      }
    }, false);
  },

  manageInitialEvents: function manageInitialEvents(obj, event) {
    if (event.keyCode === 32) {
      if (!obj.started) {
        obj.start(obj);
      }
    }
  },

  start: function start(obj) {
    screen.start();
    obj.started = true;

    window.removeEventListener('keyup', obj.eManage, false);

    obj.btnShuffle.addEventListener('click', function () {
      obj.shuffle(obj);
    }, false);

    window.addEventListener('keyup', function (event) {
      if (event.keyCode === 32) {} else if (event.keyCode === 83) {
        obj.shuffle(obj);
      }
    }, false);
  },

  shuffle: function shuffle(obj) {
    var animations = ['shuffle', 'shuffle-alt'];
    var randomAnimation = Math.floor(Math.random() * animations.length);

    if (!obj.playerWord.paused) {
      obj.playerWord.pause();
      obj.playerWord.currentTime = 0;
    }

    if (document.querySelector('.animal .instructions') !== null) {
      obj.thumbBox.removeChild(obj.instructions);
    }

    var thumb = document.querySelector('.animal-thumb');

    if (thumb != null) {
      obj.thumbBox.removeChild(thumb);
    }

    obj.thumbBox.classList.add(animations[randomAnimation]);
    obj.animalName.classList.add('fade');

    var animal = zoo.getRandomAnimal();

    setTimeout(function () {
      obj.thumbBox.addEventListener('animationend', obj.createAnimal(obj, animal, animations, randomAnimation), false);
    }, 300);
  },

  createAnimal: function createAnimal(obj, animal, animations, randomAnimation) {
    var thumb = document.createElement('img');

    if (obj.thumbBox.querySelector('.animal-thumb') != null) {
      var oldThumb = obj.thumbBox.querySelector('.animal-thumb');
      obj.thumbBox.removeChild(oldThumb);
    }

    thumb.setAttribute('src', obj.thumbPath + '/' + animal.file + '.svg');
    thumb.setAttribute('alt', animal.name);
    thumb.setAttribute('class', 'animal-thumb');

    obj.thumbBox.appendChild(thumb);
    obj.animalName.innerHTML = animal.name;

    obj.thumbBox.classList.remove(animations[randomAnimation]);
    obj.animalName.classList.remove('fade');

    delete obj.playerWord.ontimeupdate;

    obj.setWord(obj, animal);
    obj.playerWord.play();

    obj.setSound(obj, animal);
  },

  setWord: function setWord(obj, animal) {
    var timeInit = animal.audio.word.start;
    var timeEnd = animal.audio.word.end;

    obj.playerWord.currentTime = timeInit;

    obj.playerWord.ontimeupdate = function () {
      if (obj.playerWord.currentTime > timeEnd) {
        obj.playerWord.pause();
      }
    };
  },

  setSound: function setSound(obj, animal) {
    while (obj.playerSound.hasChildNodes()) {
      obj.playerSound.removeChild(obj.playerSound.lastChild);
    }

    var audioFormats = [{
      type: 'audio/mp3',
      format: 'mp3'
    }, {
      type: 'audio/ogg',
      format: 'ogg'
    }];

    audioFormats.forEach(function (element, index) {
      var soundElement = document.createElement('source');
      var soundSrc = '/audio/animals/' + animal.file + '.' + element.format;

      soundElement.setAttribute('src', soundSrc);
      soundElement.setAttribute('type', element.type);

      obj.playerSound.appendChild(soundElement);

      obj.playerSound.load();
    });
  }
};

function App(name) {
  return new BuildApp(name);
}

/* harmony default export */ __webpack_exports__["a"] = (App);

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Screen = function () {
  function Screen() {
    _classCallCheck(this, Screen);

    this.startScreen = 'intro';
  }

  _createClass(Screen, [{
    key: 'init',
    value: function init() {
      this.setCurrentScreen(this.startScreen);
      document.querySelector('.' + this.startScreen).classList.add('active');
    }
  }, {
    key: 'start',
    value: function start() {
      this.hideScreen(this.getCurrentScreen());
      this.setCurrentScreen('app');
      this.showCurrentScreen();
    }
  }, {
    key: 'setCurrentScreen',
    value: function setCurrentScreen(screen) {
      this.currentScreen = screen;
    }
  }, {
    key: 'getCurrentScreen',
    value: function getCurrentScreen() {
      return this.currentScreen;
    }
  }, {
    key: 'showCurrentScreen',
    value: function showCurrentScreen() {
      var screen = this.getCurrentScreen();
      document.querySelector('.' + screen).classList.add('active');
      this.setCurrentScreen(screen);
    }
  }, {
    key: 'hideScreen',
    value: function hideScreen(screen) {
      var current = screen;
      document.querySelector('.' + current).classList.remove('active');
    }
  }]);

  return Screen;
}();

/* harmony default export */ __webpack_exports__["a"] = (Screen);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = [{
  name: 'Bear',
  file: 'bear',
  audio: {
    word: {
      start: 0,
      end: 0.757
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Bird',
  file: 'bird',
  audio: {
    word: {
      start: 0,
      end: 0.757
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Camel',
  file: 'camel',
  audio: {
    word: {
      start: 0,
      end: 0.757
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Cat',
  file: 'cat',
  audio: {
    word: {
      start: 0,
      end: 0.757
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Chicken',
  file: 'chicken',
  audio: {
    word: {
      start: 0,
      end: 0.757
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Cow',
  file: 'cow',
  audio: {
    word: {
      start: 1.674,
      end: 2.451
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Dog',
  file: 'dog',
  audio: {
    word: {
      start: 3.367,
      end: 4.184
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Dolphin',
  file: 'dolphin',
  audio: {
    word: {
      start: 5.181,
      end: 6.117
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Dove',
  file: 'dove',
  audio: {
    word: {
      start: 5.181,
      end: 6.117
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Duck',
  file: 'duck',
  audio: {
    word: {
      start: 8.548,
      end: 9.345
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Elephant',
  file: 'elephant',
  audio: {
    word: {
      start: 10.202,
      end: 11.178
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Frog',
  file: 'frog',
  audio: {
    word: {
      start: 12.015,
      end: 12.692
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Goat',
  file: 'goat',
  audio: {
    word: {
      start: 13.669,
      end: 14.326
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Goose',
  file: 'goose',
  audio: {
    word: {
      start: 13.669,
      end: 14.326
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Hamster',
  file: 'hamster',
  audio: {
    word: {
      start: 15.362,
      end: 16.279
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Horse',
  file: 'horse',
  audio: {
    word: {
      start: 15.362,
      end: 16.279
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Lion',
  file: 'lion',
  audio: {
    word: {
      start: 17.116,
      end: 17.893
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Macaw',
  file: 'macaw',
  audio: {
    word: {
      start: 18.909,
      end: 19.846
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Monkey',
  file: 'monkey',
  audio: {
    word: {
      start: 20.503,
      end: 21.419
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Mouse',
  file: 'mouse',
  audio: {
    word: {
      start: 22.256,
      end: 23.033
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Owl',
  file: 'owl',
  audio: {
    word: {
      start: 23.870,
      end: 24.588
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Pig',
  file: 'pig',
  audio: {
    word: {
      start: 25.539,
      end: 26.244
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Rooster',
  file: 'rooster',
  audio: {
    word: {
      start: 25.539,
      end: 26.244
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Sheep',
  file: 'sheep',
  audio: {
    word: {
      start: 26.979,
      end: 27.736
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}, {
  name: 'Snake',
  file: 'snake',
  audio: {
    word: {
      start: 26.979,
      end: 27.736
    },
    sound: {
      start: 0,
      end: 0
    }
  }
}];

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Zoo = function () {
  function Zoo(animals) {
    _classCallCheck(this, Zoo);

    this.animals = animals || [];
  }

  _createClass(Zoo, [{
    key: "getRandomAnimal",
    value: function getRandomAnimal() {
      var randomKey = Math.floor(Math.random() * this.animals.length);
      return this.animals[randomKey];
    }
  }]);

  return Zoo;
}();

/* harmony default export */ __webpack_exports__["a"] = (Zoo);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,