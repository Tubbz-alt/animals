/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(1);
	
	var _app2 = _interopRequireDefault(_app);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	  var myApp = (0, _app2.default)('Pet Sounds');
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _screen = __webpack_require__(2);
	
	var _screen2 = _interopRequireDefault(_screen);
	
	var _animals = __webpack_require__(3);
	
	var _animals2 = _interopRequireDefault(_animals);
	
	var _zoo = __webpack_require__(4);
	
	var _zoo2 = _interopRequireDefault(_zoo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var screen = new _screen2.default(); // if ('serviceWorker' in navigator) {
	//   navigator.serviceWorker.register('/sw.js')
	//   .then(function(reg) {
	//     // registration worked
	//     console.log('Registration succeeded. Scope is ' + reg.scope);
	//   }).catch(function(error) {
	//     // registration failed
	//     console.log('Registration failed with ' + error);
	//   });
	// }
	
	var animals = _animals2.default;
	var zoo = new _zoo2.default(animals);
	
	function BuildApp(name) {
	  this.name = name;
	  this.started = false;
	  this.thumbPath = '/images/animals';
	
	  this.app = document.querySelector('.animal');
	  this.animalName = document.querySelector('.animal .name');
	  this.instructions = document.querySelector('.animal .instructions');
	  this.thumbBox = document.querySelector('.thumb-box');
	  this.btnStart = document.querySelector('.start-app');
	  this.btnShuffle = document.querySelector('.shuffle');
	
	  var obj = this;
	  this.init(obj);
	}
	
	BuildApp.prototype = {
	  init: function init(obj) {
	
	    screen.init();
	
	    obj.eManage = obj.manageInitialEvents.bind(undefined, obj);
	
	    window.addEventListener('keyup', obj.eManage, false);
	
	    obj.btnStart.addEventListener('click', function () {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    });
	  },
	
	  manageInitialEvents: function manageInitialEvents(obj) {
	    if (event.keyCode == 32) {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    }
	  },
	
	  start: function start(obj) {
	    screen.start();
	    obj.started = true;
	
	    window.removeEventListener('keyup', obj.eManage, false);
	
	    obj.btnShuffle.addEventListener('click', function () {
	      obj.shuffle(obj);
	    });
	
	    window.addEventListener('keyup', function (event) {
	      if (event.keyCode == 32) {} else if (event.keyCode == 83) {
	        obj.shuffle(obj);
	      }
	    }, false);
	  },
	
	  shuffle: function shuffle(obj) {
	    var animations = ['shuffle', 'shuffle-alt'];
	    var randomAnimation = Math.floor(Math.random() * animations.length);
	
	    if (document.querySelector('.animal .instructions') != null) {
	      obj.thumbBox.removeChild(obj.instructions);
	    }
	
	    var thumb = document.querySelector('.animal .animal-thumb');
	
	    if (thumb != null) {
	      obj.thumbBox.removeChild(thumb);
	    }
	
	    obj.thumbBox.classList.add(animations[randomAnimation]);
	    obj.animalName.classList.add('fade');
	
	    var animal = zoo.getRandomAnimal();
	
	    obj.thumbBox.addEventListener("animationend", function () {
	      obj.thumbBox.classList.remove(animations[randomAnimation]);
	      obj.animalName.classList.remove('fade');
	      obj.createAnimal(obj, animal);
	    }, false);
	  },
	
	  createAnimal: function createAnimal(obj, animal) {
	    var thumb = document.createElement('img');
	
	    if (obj.thumbBox.querySelector('.animal-thumb') != null) {
	      var oldThumb = obj.thumbBox.querySelector('.animal-thumb');
	      obj.thumbBox.removeChild(oldThumb);
	    }
	
	    thumb.setAttribute('src', obj.thumbPath + '/' + animal.image);
	    thumb.setAttribute('alt', animal.name);
	    thumb.setAttribute('class', 'animal-thumb');
	    obj.thumbBox.appendChild(thumb);
	    obj.animalName.innerHTML = animal.name;
	  }
	};
	
	function App(name) {
	  return new BuildApp(name);
	}
	
	module.exports = App;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Screen = function () {
	  function Screen() {
	    _classCallCheck(this, Screen);
	
	    this.startScreen = 'intro';
	  }
	
	  _createClass(Screen, [{
	    key: 'init',
	    value: function init() {
	      this.setCurrentScreen(this.startScreen);
	      document.querySelector('.' + this.startScreen).classList.add('active');
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	      this.hideScreen(this.getCurrentScreen());
	      this.setCurrentScreen('app');
	      this.showCurrentScreen();
	    }
	  }, {
	    key: 'setCurrentScreen',
	    value: function setCurrentScreen(screen) {
	      this.currentScreen = screen;
	    }
	  }, {
	    key: 'getCurrentScreen',
	    value: function getCurrentScreen() {
	      return this.currentScreen;
	    }
	  }, {
	    key: 'showCurrentScreen',
	    value: function showCurrentScreen() {
	      var screen = this.getCurrentScreen();
	      document.querySelector('.' + screen).classList.add('active');
	      this.setCurrentScreen(screen);
	    }
	  }, {
	    key: 'hideScreen',
	    value: function hideScreen(screen) {
	      var current = screen;
	      document.querySelector('.' + current).classList.remove('active');
	    }
	  }]);
	
	  return Screen;
	}();
	
	exports.default = Screen;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = [{ name: 'Cat', image: 'cat.svg' }, { name: 'Cow', image: 'cow.svg' }, { name: 'Dog', image: 'dog.svg' }, { name: 'Dolphin', image: 'dolphin.svg' }, { name: 'Dove', image: 'dove.svg' }, { name: 'Duck', image: 'duck.svg' }, { name: 'Elephant', image: 'elephant.svg' }, { name: 'Frog', image: 'frog.svg' }, { name: 'Hen', image: 'hen.svg' }, { name: 'Horse', image: 'horse.svg' }, { name: 'Lion', image: 'lion.svg' }, { name: 'Macaw', image: 'macaw.svg' }, { name: 'Monkey', image: 'monkey.svg' }, { name: 'Mouse', image: 'mouse.svg' }, { name: 'Owl', image: 'owl.svg' }, { name: 'Pig', image: 'pig.svg' }, { name: 'Snake', image: 'snake.svg' }, { name: 'Whale', image: 'whale.svg' }];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Zoo = function () {
	  function Zoo(animals) {
	    _classCallCheck(this, Zoo);
	
	    this.animals = animals || [];
	  }
	
	  _createClass(Zoo, [{
	    key: "getRandomAnimal",
	    value: function getRandomAnimal() {
	      var randomKey = Math.floor(Math.random() * this.animals.length);
	      return this.animals[randomKey];
	    }
	  }]);
	
	  return Zoo;
	}();
	
	exports.default = Zoo;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYWRjYjgxZDAxYmI4ZDI5ZTU3ODYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC1zcmMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZHVsZXMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL3NjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9hbmltYWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL3pvby5qcyJdLCJuYW1lcyI6WyJteUFwcCIsInNjcmVlbiIsImFuaW1hbHMiLCJ6b28iLCJCdWlsZEFwcCIsIm5hbWUiLCJzdGFydGVkIiwidGh1bWJQYXRoIiwiYXBwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYW5pbWFsTmFtZSIsImluc3RydWN0aW9ucyIsInRodW1iQm94IiwiYnRuU3RhcnQiLCJidG5TaHVmZmxlIiwib2JqIiwiaW5pdCIsInByb3RvdHlwZSIsImVNYW5hZ2UiLCJtYW5hZ2VJbml0aWFsRXZlbnRzIiwiYmluZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGFydCIsImV2ZW50Iiwia2V5Q29kZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzaHVmZmxlIiwiYW5pbWF0aW9ucyIsInJhbmRvbUFuaW1hdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInJlbW92ZUNoaWxkIiwidGh1bWIiLCJjbGFzc0xpc3QiLCJhZGQiLCJhbmltYWwiLCJnZXRSYW5kb21BbmltYWwiLCJyZW1vdmUiLCJjcmVhdGVBbmltYWwiLCJjcmVhdGVFbGVtZW50Iiwib2xkVGh1bWIiLCJzZXRBdHRyaWJ1dGUiLCJpbWFnZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiQXBwIiwibW9kdWxlIiwiZXhwb3J0cyIsIlNjcmVlbiIsInN0YXJ0U2NyZWVuIiwic2V0Q3VycmVudFNjcmVlbiIsImhpZGVTY3JlZW4iLCJnZXRDdXJyZW50U2NyZWVuIiwic2hvd0N1cnJlbnRTY3JlZW4iLCJjdXJyZW50U2NyZWVuIiwiY3VycmVudCIsIlpvbyIsInJhbmRvbUtleSJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQTs7Ozs7O0FBRUEsRUFBQyxZQUFNO0FBQ0wsT0FBSUEsUUFBUSxtQkFBSSxZQUFKLENBQVo7QUFDRCxFQUZELEk7Ozs7Ozs7O0FDU0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxLQUFJQyxTQUFTLHNCQUFiLEMsQ0FmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFPQSxLQUFNQywyQkFBTjtBQUNBLEtBQU1DLE1BQU0sa0JBQVFELE9BQVIsQ0FBWjs7QUFFQSxVQUFTRSxRQUFULENBQWtCQyxJQUFsQixFQUF3QjtBQUN0QixRQUFLQSxJQUFMLEdBQVlBLElBQVo7QUFDQSxRQUFLQyxPQUFMLEdBQWUsS0FBZjtBQUNBLFFBQUtDLFNBQUwsR0FBaUIsaUJBQWpCOztBQUVBLFFBQUtDLEdBQUwsR0FBV0MsU0FBU0MsYUFBVCxDQUF1QixTQUF2QixDQUFYO0FBQ0EsUUFBS0MsVUFBTCxHQUFrQkYsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUFsQjtBQUNBLFFBQUtFLFlBQUwsR0FBb0JILFNBQVNDLGFBQVQsQ0FBdUIsdUJBQXZCLENBQXBCO0FBQ0EsUUFBS0csUUFBTCxHQUFnQkosU0FBU0MsYUFBVCxDQUF1QixZQUF2QixDQUFoQjtBQUNBLFFBQUtJLFFBQUwsR0FBZ0JMLFNBQVNDLGFBQVQsQ0FBdUIsWUFBdkIsQ0FBaEI7QUFDQSxRQUFLSyxVQUFMLEdBQWtCTixTQUFT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QUFPLFNBQXRCLEVBVGUsRUFVZixFQUFFekMsTUFBTSxPQUFSLEVBQWlCeUMsT0FBTyxXQUF4QixFQVZlLEVBV2YsRUFBRXpDLE1BQU0sTUFBUixFQUFnQnlDLE9BQU8sVUFBdkIsRUFYZSxFQVlmLEVBQUV6QyxNQUFNLE9BQVIsRUFBaUJ5QyxPQUFPLFdBQXhCLEVBWmUsRUFhZixFQUFFekMsTUFBTSxRQUFSLEVBQWtCeUMsT0FBTyxZQUF6QixFQWJlLEVBY2YsRUFBRXpDLE1BQU0sT0FBUixFQUFpQnlDLE9BQU8sV0FBeEIsRUFkZSxFQWVmLEVBQUV6QyxNQUFNLEtBQVIsRUFBZXlDLE9BQU8sU0FBdEIsRUFmZSxFQWdCZixFQUFFekMsTUFBTSxLQUFSLEVBQWV5QyxPQUFPLFNBQXRCLEVBaEJlLEVBaUJmLEVBQUV6QyxNQUFNLE9BQVIsRUFBaUJ5QyxPQUFPLFdBQXhCLEVBakJlLEVBa0JmLEVBQUV6QyxNQUFNLE9BQVIsRUFBaUJ5QyxPQUFPLFdBQXhCLEVBbEJlLENBQWpCLEM7Ozs7Ozs7Ozs7Ozs7Ozs7S0NBcUJjLEc7QUFDbkIsZ0JBQVkxRCxPQUFaLEVBQXFCO0FBQUE7O0FBQ25CLFVBQUtBLE9BQUwsR0FBZUEsV0FBVyxFQUExQjtBQUNEOzs7O3VDQUVpQjtBQUNoQixXQUFJMkQsWUFBWTlCLEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxLQUFnQixLQUFLL0IsT0FBTCxDQUFhZ0MsTUFBeEMsQ0FBaEI7QUFDQSxjQUFPLEtBQUtoQyxPQUFMLENBQWEyRCxTQUFiLENBQVA7QUFDRDs7Ozs7O21CQVJrQkQsRyIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgYWRjYjgxZDAxYmI4ZDI5ZTU3ODYiLCJpbXBvcnQgQXBwIGZyb20gJy4vbW9kdWxlcy9hcHAnXG5cbigoKSA9PiB7XG4gIGxldCBteUFwcCA9IEFwcCgnUGV0IFNvdW5kcycpXG59KSgpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvYXBwLXNyYy5qcyIsIi8vIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4vLyAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcvc3cuanMnKVxuLy8gICAudGhlbihmdW5jdGlvbihyZWcpIHtcbi8vICAgICAvLyByZWdpc3RyYXRpb24gd29ya2VkXG4vLyAgICAgY29uc29sZS5sb2coJ1JlZ2lzdHJhdGlvbiBzdWNjZWVkZWQuIFNjb3BlIGlzICcgKyByZWcuc2NvcGUpO1xuLy8gICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuLy8gICAgIC8vIHJlZ2lzdHJhdGlvbiBmYWlsZWRcbi8vICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGZhaWxlZCB3aXRoICcgKyBlcnJvcik7XG4vLyAgIH0pO1xuLy8gfVxuXG5pbXBvcnQgU2NyZWVuIGZyb20gXCIuL3NjcmVlblwiXG5pbXBvcnQgQW5pbWFscyBmcm9tIFwiLi9hbmltYWxzXCJcbmltcG9ydCBab28gZnJvbSBcIi4vem9vXCJcblxubGV0IHNjcmVlbiA9IG5ldyBTY3JlZW5cbmNvbnN0IGFuaW1hbHMgPSBBbmltYWxzXG5jb25zdCB6b28gPSBuZXcgWm9vKGFuaW1hbHMpXG5cbmZ1bmN0aW9uIEJ1aWxkQXBwKG5hbWUpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5zdGFydGVkID0gZmFsc2VcbiAgdGhpcy50aHVtYlBhdGggPSAnL2ltYWdlcy9hbmltYWxzJ1xuXG4gIHRoaXMuYXBwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFuaW1hbCcpXG4gIHRoaXMuYW5pbWFsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwgLm5hbWUnKVxuICB0aGlzLmluc3RydWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwgLmluc3RydWN0aW9ucycpXG4gIHRoaXMudGh1bWJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGh1bWItYm94JylcbiAgdGhpcy5idG5TdGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFydC1hcHAnKVxuICB0aGlzLmJ0blNodWZmbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2h1ZmZsZScpXG5cbiAgY29uc3Qgb2JqID0gdGhpc1xuICB0aGlzLmluaXQob2JqKVxufVxuXG5CdWlsZEFwcC5wcm90b3R5cGUgPSB7XG4gIGluaXQ6IChvYmopID0+IHtcblxuICAgIHNjcmVlbi5pbml0KClcblxuICAgIG9iai5lTWFuYWdlID0gb2JqLm1hbmFnZUluaXRpYWxFdmVudHMuYmluZCh0aGlzLCBvYmopXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBvYmouZU1hbmFnZSwgZmFsc2UpXG5cbiAgICBvYmouYnRuU3RhcnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBpZiAoIW9iai5zdGFydGVkKSB7XG4gICAgICAgIG9iai5zdGFydChvYmopXG4gICAgICB9XG4gICAgfSlcbiAgfSxcblxuICBtYW5hZ2VJbml0aWFsRXZlbnRzOiAob2JqKSA9PiB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgIGlmICghb2JqLnN0YXJ0ZWQpIHtcbiAgICAgICAgb2JqLnN0YXJ0KG9iailcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgc3RhcnQ6IChvYmopID0+IHtcbiAgICBzY3JlZW4uc3RhcnQoKVxuICAgIG9iai5zdGFydGVkID0gdHJ1ZVxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb2JqLmVNYW5hZ2UsIGZhbHNlKVxuXG4gICAgb2JqLmJ0blNodWZmbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBvYmouc2h1ZmZsZShvYmopXG4gICAgfSlcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAzMikge1xuICAgICAgICBcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSA4Mykge1xuICAgICAgICBvYmouc2h1ZmZsZShvYmopXG4gICAgICB9XG4gICAgfSwgZmFsc2UpXG4gIH0sXG5cbiAgc2h1ZmZsZTogKG9iaikgPT4ge1xuICAgIGxldCBhbmltYXRpb25zID0gWydzaHVmZmxlJywgJ3NodWZmbGUtYWx0J11cbiAgICBsZXQgcmFuZG9tQW5pbWF0aW9uID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYW5pbWF0aW9ucy5sZW5ndGgpXG5cbiAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFuaW1hbCAuaW5zdHJ1Y3Rpb25zJykgIT0gbnVsbCkge1xuICAgICAgb2JqLnRodW1iQm94LnJlbW92ZUNoaWxkKG9iai5pbnN0cnVjdGlvbnMpXG4gICAgfVxuXG4gICAgbGV0IHRodW1iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFuaW1hbCAuYW5pbWFsLXRodW1iJylcblxuICAgIGlmICh0aHVtYiAhPSBudWxsKSB7XG4gICAgICBvYmoudGh1bWJCb3gucmVtb3ZlQ2hpbGQodGh1bWIpXG4gICAgfVxuXG4gICAgb2JqLnRodW1iQm94LmNsYXNzTGlzdC5hZGQoYW5pbWF0aW9uc1tyYW5kb21BbmltYXRpb25dKVxuICAgIG9iai5hbmltYWxOYW1lLmNsYXNzTGlzdC5hZGQoJ2ZhZGUnKVxuXG4gICAgbGV0IGFuaW1hbCA9IHpvby5nZXRSYW5kb21BbmltYWwoKVxuXG4gICAgb2JqLnRodW1iQm94LmFkZEV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgKCkgPT4ge1xuICAgICAgb2JqLnRodW1iQm94LmNsYXNzTGlzdC5yZW1vdmUoYW5pbWF0aW9uc1tyYW5kb21BbmltYXRpb25dKVxuICAgICAgb2JqLmFuaW1hbE5hbWUuY2xhc3NMaXN0LnJlbW92ZSgnZmFkZScpXG4gICAgICBvYmouY3JlYXRlQW5pbWFsKG9iaiwgYW5pbWFsKVxuICAgIH0sIGZhbHNlKTtcbiAgfSxcblxuICBjcmVhdGVBbmltYWw6IChvYmosIGFuaW1hbCkgPT4ge1xuICAgIGxldCB0aHVtYiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpXG5cbiAgICBpZiAob2JqLnRodW1iQm94LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwtdGh1bWInKSAhPSBudWxsKSB7XG4gICAgICBsZXQgb2xkVGh1bWIgPSBvYmoudGh1bWJCb3gucXVlcnlTZWxlY3RvcignLmFuaW1hbC10aHVtYicpXG4gICAgICBvYmoudGh1bWJCb3gucmVtb3ZlQ2hpbGQob2xkVGh1bWIpXG4gICAgfVxuICAgIFxuICAgIHRodW1iLnNldEF0dHJpYnV0ZSgnc3JjJywgb2JqLnRodW1iUGF0aCArICcvJyArIGFuaW1hbC5pbWFnZSlcbiAgICB0aHVtYi5zZXRBdHRyaWJ1dGUoJ2FsdCcsIGFuaW1hbC5uYW1lKVxuICAgIHRodW1iLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYW5pbWFsLXRodW1iJylcbiAgICBvYmoudGh1bWJCb3guYXBwZW5kQ2hpbGQodGh1bWIpXG4gICAgb2JqLmFuaW1hbE5hbWUuaW5uZXJIVE1MID0gYW5pbWFsLm5hbWVcbiAgfVxufVxuXG5mdW5jdGlvbiBBcHAobmFtZSkge1xuICByZXR1cm4gbmV3IEJ1aWxkQXBwKG5hbWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9tb2R1bGVzL2FwcC5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjcmVlbiB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5zdGFydFNjcmVlbiA9ICdpbnRybydcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdGhpcy5zZXRDdXJyZW50U2NyZWVuKHRoaXMuc3RhcnRTY3JlZW4pXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyB0aGlzLnN0YXJ0U2NyZWVuKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICB9XG5cbiAgc3RhcnQoKSB7XG4gICAgdGhpcy5oaWRlU2NyZWVuKHRoaXMuZ2V0Q3VycmVudFNjcmVlbigpKVxuICAgIHRoaXMuc2V0Q3VycmVudFNjcmVlbignYXBwJylcbiAgICB0aGlzLnNob3dDdXJyZW50U2NyZWVuKClcbiAgfVxuXG4gIHNldEN1cnJlbnRTY3JlZW4oc2NyZWVuKSB7XG4gICAgdGhpcy5jdXJyZW50U2NyZWVuID0gc2NyZWVuXG4gIH1cblxuICBnZXRDdXJyZW50U2NyZWVuKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTY3JlZW5cbiAgfVxuXG4gIHNob3dDdXJyZW50U2NyZWVuKCkge1xuICAgIGxldCBzY3JlZW4gPSB0aGlzLmdldEN1cnJlbnRTY3JlZW4oKVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgc2NyZWVuKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKVxuICAgIHRoaXMuc2V0Q3VycmVudFNjcmVlbihzY3JlZW4pXG4gIH1cblxuICBoaWRlU2NyZWVuKHNjcmVlbikge1xuICAgIGxldCBjdXJyZW50ID0gc2NyZWVuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLicgKyBjdXJyZW50KS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKVxuICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9tb2R1bGVzL3NjcmVlbi5qcyIsIm1vZHVsZS5leHBvcnRzID0gW1xuICB7IG5hbWU6ICdDYXQnLCBpbWFnZTogJ2NhdC5zdmcnIH0sXG4gIHsgbmFtZTogJ0NvdycsIGltYWdlOiAnY293LnN2ZycgfSxcbiAgeyBuYW1lOiAnRG9nJywgaW1hZ2U6ICdkb2cuc3ZnJyB9LFxuICB7IG5hbWU6ICdEb2xwaGluJywgaW1hZ2U6ICdkb2xwaGluLnN2ZycgfSxcbiAgeyBuYW1lOiAnRG92ZScsIGltYWdlOiAnZG92ZS5zdmcnIH0sXG4gIHsgbmFtZTogJ0R1Y2snLCBpbWFnZTogJ2R1Y2suc3ZnJyB9LFxuICB7IG5hbWU6ICdFbGVwaGFudCcsIGltYWdlOiAnZWxlcGhhbnQuc3ZnJyB9LFxuICB7IG5hbWU6ICdGcm9nJywgaW1hZ2U6ICdmcm9nLnN2ZycgfSxcbiAgeyBuYW1lOiAnSGVuJywgaW1hZ2U6ICdoZW4uc3ZnJyB9LFxuICB7IG5hbWU6ICdIb3JzZScsIGltYWdlOiAnaG9yc2Uuc3ZnJyB9LFxuICB7IG5hbWU6ICdMaW9uJywgaW1hZ2U6ICdsaW9uLnN2ZycgfSxcbiAgeyBuYW1lOiAnTWFjYXcnLCBpbWFnZTogJ21hY2F3LnN2ZycgfSxcbiAgeyBuYW1lOiAnTW9ua2V5JywgaW1hZ2U6ICdtb25rZXkuc3ZnJyB9LFxuICB7IG5hbWU6ICdNb3VzZScsIGltYWdlOiAnbW91c2Uuc3ZnJyB9LFxuICB7IG5hbWU6ICdPd2wnLCBpbWFnZTogJ293bC5zdmcnIH0sXG4gIHsgbmFtZTogJ1BpZycsIGltYWdlOiAncGlnLnN2ZycgfSxcbiAgeyBuYW1lOiAnU25ha2UnLCBpbWFnZTogJ3NuYWtlLnN2ZycgfSxcbiAgeyBuYW1lOiAnV2hhbGUnLCBpbWFnZTogJ3doYWxlLnN2ZycgfVxuXVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21vZHVsZXMvYW5pbWFscy5qcyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFpvbyB7XG4gIGNvbnN0cnVjdG9yKGFuaW1hbHMpIHtcbiAgICB0aGlzLmFuaW1hbHMgPSBhbmltYWxzIHx8IFtdXG4gIH1cblxuICBnZXRSYW5kb21BbmltYWwoKSB7XG4gICAgbGV0IHJhbmRvbUtleSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuYW5pbWFscy5sZW5ndGgpXG4gICAgcmV0dXJuIHRoaXMuYW5pbWFsc1tyYW5kb21LZXldXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9tb2R1bGVzL3pvby5qcyJdLCJzb3VyY2VSb290IjoiIn0=