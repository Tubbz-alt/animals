/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(1);
	
	var _app2 = _interopRequireDefault(_app);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	  var myApp = (0, _app2.default)('Pet Sounds');
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _screen = __webpack_require__(2);
	
	var _screen2 = _interopRequireDefault(_screen);
	
	var _animals = __webpack_require__(3);
	
	var _animals2 = _interopRequireDefault(_animals);
	
	var _zoo = __webpack_require__(4);
	
	var _zoo2 = _interopRequireDefault(_zoo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var screen = new _screen2.default(); // if ('serviceWorker' in navigator) {
	//   navigator.serviceWorker.register('/sw.js')
	//   .then(function(reg) {
	//     // registration worked
	//     console.log('Registration succeeded. Scope is ' + reg.scope);
	//   }).catch(function(error) {
	//     // registration failed
	//     console.log('Registration failed with ' + error);
	//   });
	// }
	
	var animals = _animals2.default;
	var zoo = new _zoo2.default(animals);
	
	function BuildApp(name) {
	  this.name = name;
	  this.started = false;
	  this.thumbPath = '/images/animals';
	
	  this.app = document.querySelector('.animal');
	  this.animalName = document.querySelector('.animal .name');
	  this.instructions = document.querySelector('.animal .instructions');
	  this.thumbBox = document.querySelector('.thumb-box');
	  this.btnStart = document.querySelector('.start-app');
	  this.btnShuffle = document.querySelector('.shuffle');
	  this.player = document.querySelector('.player');
	
	  var obj = this;
	  this.init(obj);
	}
	
	BuildApp.prototype = {
	  init: function init(obj) {
	
	    screen.init();
	
	    obj.eManage = obj.manageInitialEvents.bind(undefined, obj);
	
	    window.addEventListener('keyup', obj.eManage, false);
	
	    obj.btnStart.addEventListener('click', function () {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    }, false);
	  },
	
	  manageInitialEvents: function manageInitialEvents(obj) {
	    if (event.keyCode == 32) {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    }
	  },
	
	  start: function start(obj) {
	    screen.start();
	    obj.started = true;
	
	    window.removeEventListener('keyup', obj.eManage, false);
	
	    obj.btnShuffle.addEventListener('click', function () {
	      obj.shuffle(obj);
	    }, false);
	
	    window.addEventListener('keyup', function (event) {
	      if (event.keyCode == 32) {} else if (event.keyCode == 83) {
	        obj.shuffle(obj);
	      }
	    }, false);
	  },
	
	  shuffle: function shuffle(obj) {
	    var animations = ['shuffle', 'shuffle-alt'];
	    var randomAnimation = Math.floor(Math.random() * animations.length);
	
	    if (!obj.player.paused) {
	      obj.player.pause();
	      obj.player.currentTime = 0;
	    }
	
	    if (document.querySelector('.animal .instructions') != null) {
	      obj.thumbBox.removeChild(obj.instructions);
	    }
	
	    var thumb = document.querySelector('.animal-thumb');
	
	    if (thumb != null) {
	      obj.thumbBox.removeChild(thumb);
	    }
	
	    obj.thumbBox.classList.add(animations[randomAnimation]);
	    obj.animalName.classList.add('fade');
	
	    var animal = zoo.getRandomAnimal();
	
	    var time = setTimeout(function () {
	      obj.thumbBox.addEventListener('animationend', obj.createAnimal(obj, animal, animations, randomAnimation), false);
	    }, 300);
	  },
	
	  createAnimal: function createAnimal(obj, animal, animations, randomAnimation) {
	    var thumb = document.createElement('img');
	
	    if (obj.thumbBox.querySelector('.animal-thumb') != null) {
	      var oldThumb = obj.thumbBox.querySelector('.animal-thumb');
	      obj.thumbBox.removeChild(oldThumb);
	    }
	
	    thumb.setAttribute('src', obj.thumbPath + '/' + animal.image);
	    thumb.setAttribute('alt', animal.name);
	    thumb.setAttribute('class', 'animal-thumb');
	
	    obj.thumbBox.appendChild(thumb);
	    obj.animalName.innerHTML = animal.name;
	
	    obj.thumbBox.classList.remove(animations[randomAnimation]);
	    obj.animalName.classList.remove('fade');
	
	    delete obj.player.ontimeupdate;
	
	    obj.setSound(obj, animal);
	    obj.player.play();
	  },
	
	  setSound: function setSound(obj, animal) {
	    var timeInit = animal.sound.word.start;
	    var timeEnd = animal.sound.word.end;
	
	    obj.player.currentTime = timeInit;
	
	    obj.player.ontimeupdate = function () {
	      if (obj.player.currentTime > timeEnd) {
	        obj.player.pause();
	      }
	    };
	  }
	};
	
	function App(name) {
	  return new BuildApp(name);
	}
	
	module.exports = App;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Screen = function () {
	  function Screen() {
	    _classCallCheck(this, Screen);
	
	    this.startScreen = 'intro';
	  }
	
	  _createClass(Screen, [{
	    key: 'init',
	    value: function init() {
	      this.setCurrentScreen(this.startScreen);
	      document.querySelector('.' + this.startScreen).classList.add('active');
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	      this.hideScreen(this.getCurrentScreen());
	      this.setCurrentScreen('app');
	      this.showCurrentScreen();
	    }
	  }, {
	    key: 'setCurrentScreen',
	    value: function setCurrentScreen(screen) {
	      this.currentScreen = screen;
	    }
	  }, {
	    key: 'getCurrentScreen',
	    value: function getCurrentScreen() {
	      return this.currentScreen;
	    }
	  }, {
	    key: 'showCurrentScreen',
	    value: function showCurrentScreen() {
	      var screen = this.getCurrentScreen();
	      document.querySelector('.' + screen).classList.add('active');
	      this.setCurrentScreen(screen);
	    }
	  }, {
	    key: 'hideScreen',
	    value: function hideScreen(screen) {
	      var current = screen;
	      document.querySelector('.' + current).classList.remove('active');
	    }
	  }]);
	
	  return Screen;
	}();
	
	exports.default = Screen;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = [{
	  name: 'Cat',
	  image: 'cat.svg',
	  sound: {
	    word: {
	      start: 0,
	      end: 0.757
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Cow',
	  image: 'cow.svg',
	  sound: {
	    word: {
	      start: 1.674,
	      end: 2.451
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Dog',
	  image: 'dog.svg',
	  sound: {
	    word: {
	      start: 3.367,
	      end: 4.184
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Dolphin',
	  image: 'dolphin.svg',
	  sound: {
	    word: {
	      start: 5.181,
	      end: 6.117
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Dove',
	  image: 'dove.svg',
	  sound: {
	    word: {
	      start: 6.914,
	      end: 7.691
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Duck',
	  image: 'duck.svg',
	  sound: {
	    word: {
	      start: 8.548,
	      end: 9.345
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Elephant',
	  image: 'elephant.svg',
	  sound: {
	    word: {
	      start: 10.202,
	      end: 11.178
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Frog',
	  image: 'frog.svg',
	  sound: {
	    word: {
	      start: 12.015,
	      end: 12.692
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Hen',
	  image: 'hen.svg',
	  sound: {
	    word: {
	      start: 13.669,
	      end: 14.326
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Horse',
	  image: 'horse.svg',
	  sound: {
	    word: {
	      start: 15.362,
	      end: 16.279
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Lion',
	  image: 'lion.svg',
	  sound: {
	    word: {
	      start: 17.116,
	      end: 17.893
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Macaw',
	  image: 'macaw.svg',
	  sound: {
	    word: {
	      start: 18.909,
	      end: 19.846
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Monkey',
	  image: 'monkey.svg',
	  sound: {
	    word: {
	      start: 20.503,
	      end: 21.419
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Mouse',
	  image: 'mouse.svg',
	  sound: {
	    word: {
	      start: 22.256,
	      end: 23.033
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Owl',
	  image: 'owl.svg',
	  sound: {
	    word: {
	      start: 23.870,
	      end: 24.588
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Pig',
	  image: 'pig.svg',
	  sound: {
	    word: {
	      start: 25.539,
	      end: 26.244
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Snake',
	  image: 'snake.svg',
	  sound: {
	    word: {
	      start: 26.979,
	      end: 27.736
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Whale',
	  image: 'whale.svg',
	  sound: {
	    word: {
	      start: 28.632,
	      end: 29.450
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Zoo = function () {
	  function Zoo(animals) {
	    _classCallCheck(this, Zoo);
	
	    this.animals = animals || [];
	  }
	
	  _createClass(Zoo, [{
	    key: "getRandomAnimal",
	    value: function getRandomAnimal() {
	      var randomKey = Math.floor(Math.random() * this.animals.length);
	      return this.animals[randomKey];
	    }
	  }]);
	
	  return Zoo;
	}();
	
	exports.default = Zoo;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,