/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _app = __webpack_require__(1);
	
	var _app2 = _interopRequireDefault(_app);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	(function () {
	  var myApp = (0, _app2.default)('Pet Sounds');
	})();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _screen = __webpack_require__(2);
	
	var _screen2 = _interopRequireDefault(_screen);
	
	var _animals = __webpack_require__(3);
	
	var _animals2 = _interopRequireDefault(_animals);
	
	var _zoo = __webpack_require__(4);
	
	var _zoo2 = _interopRequireDefault(_zoo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var screen = new _screen2.default(); // if ('serviceWorker' in navigator) {
	//   navigator.serviceWorker.register('/sw.js')
	//   .then(function(reg) {
	//     // registration worked
	//     console.log('Registration succeeded. Scope is ' + reg.scope);
	//   }).catch(function(error) {
	//     // registration failed
	//     console.log('Registration failed with ' + error);
	//   });
	// }
	
	var animals = _animals2.default;
	var zoo = new _zoo2.default(animals);
	
	function BuildApp(name) {
	  this.name = name;
	  this.started = false;
	  this.thumbPath = '/images/animals';
	
	  this.app = document.querySelector('.animal');
	  this.animalName = document.querySelector('.animal .name');
	  this.instructions = document.querySelector('.animal .instructions');
	  this.thumbBox = document.querySelector('.thumb-box');
	  this.btnStart = document.querySelector('.start-app');
	  this.btnShuffle = document.querySelector('.shuffle');
	  this.playerWord = document.querySelector('.player-word');
	  this.playerSound = document.querySelector('.player-sound');
	
	  var obj = this;
	  this.init(obj);
	}
	
	BuildApp.prototype = {
	  init: function init(obj) {
	
	    screen.init();
	
	    obj.eManage = obj.manageInitialEvents.bind(undefined, obj);
	
	    window.addEventListener('keyup', obj.eManage, false);
	
	    obj.btnStart.addEventListener('click', function () {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    }, false);
	  },
	
	  manageInitialEvents: function manageInitialEvents(obj) {
	    if (event.keyCode == 32) {
	      if (!obj.started) {
	        obj.start(obj);
	      }
	    }
	  },
	
	  start: function start(obj) {
	    screen.start();
	    obj.started = true;
	
	    window.removeEventListener('keyup', obj.eManage, false);
	
	    obj.btnShuffle.addEventListener('click', function () {
	      obj.shuffle(obj);
	    }, false);
	
	    window.addEventListener('keyup', function (event) {
	      if (event.keyCode == 32) {} else if (event.keyCode == 83) {
	        obj.shuffle(obj);
	      }
	    }, false);
	  },
	
	  shuffle: function shuffle(obj) {
	    var animations = ['shuffle', 'shuffle-alt'];
	    var randomAnimation = Math.floor(Math.random() * animations.length);
	
	    if (!obj.playerWord.paused) {
	      obj.playerWord.pause();
	      obj.playerWord.currentTime = 0;
	    }
	
	    if (document.querySelector('.animal .instructions') != null) {
	      obj.thumbBox.removeChild(obj.instructions);
	    }
	
	    var thumb = document.querySelector('.animal-thumb');
	
	    if (thumb != null) {
	      obj.thumbBox.removeChild(thumb);
	    }
	
	    obj.thumbBox.classList.add(animations[randomAnimation]);
	    obj.animalName.classList.add('fade');
	
	    var animal = zoo.getRandomAnimal();
	
	    var time = setTimeout(function () {
	      obj.thumbBox.addEventListener('animationend', obj.createAnimal(obj, animal, animations, randomAnimation), false);
	    }, 300);
	  },
	
	  createAnimal: function createAnimal(obj, animal, animations, randomAnimation) {
	    var thumb = document.createElement('img');
	
	    if (obj.thumbBox.querySelector('.animal-thumb') != null) {
	      var oldThumb = obj.thumbBox.querySelector('.animal-thumb');
	      obj.thumbBox.removeChild(oldThumb);
	    }
	
	    thumb.setAttribute('src', obj.thumbPath + '/' + animal.file + '.svg');
	    thumb.setAttribute('alt', animal.name);
	    thumb.setAttribute('class', 'animal-thumb');
	
	    obj.thumbBox.appendChild(thumb);
	    obj.animalName.innerHTML = animal.name;
	
	    obj.thumbBox.classList.remove(animations[randomAnimation]);
	    obj.animalName.classList.remove('fade');
	
	    delete obj.playerWord.ontimeupdate;
	
	    obj.setWord(obj, animal);
	    obj.playerWord.play();
	
	    obj.setSound(obj, animal);
	  },
	
	  setWord: function setWord(obj, animal) {
	    var timeInit = animal.audio.word.start;
	    var timeEnd = animal.audio.word.end;
	
	    obj.playerWord.currentTime = timeInit;
	
	    obj.playerWord.ontimeupdate = function () {
	      if (obj.playerWord.currentTime > timeEnd) {
	        obj.playerWord.pause();
	      }
	    };
	  },
	
	  setSound: function setSound(obj, animal) {
	    while (obj.playerSound.hasChildNodes()) {
	      obj.playerSound.removeChild(obj.playerSound.lastChild);
	    }
	
	    var audioFormats = [{
	      type: 'audio/mp3',
	      format: 'mp3'
	    }, {
	      type: 'audio/ogg',
	      format: 'ogg'
	    }];
	
	    audioFormats.forEach(function (element, index) {
	      var soundElement = document.createElement('source');
	      var soundSrc = "/audio/animals/" + animal.file + "." + element.format;
	
	      soundElement.setAttribute('src', soundSrc);
	      soundElement.setAttribute('type', element.type);
	
	      obj.playerSound.appendChild(soundElement);
	
	      obj.playerSound.load();
	    });
	  }
	};
	
	function App(name) {
	  return new BuildApp(name);
	}
	
	module.exports = App;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Screen = function () {
	  function Screen() {
	    _classCallCheck(this, Screen);
	
	    this.startScreen = 'intro';
	  }
	
	  _createClass(Screen, [{
	    key: 'init',
	    value: function init() {
	      this.setCurrentScreen(this.startScreen);
	      document.querySelector('.' + this.startScreen).classList.add('active');
	    }
	  }, {
	    key: 'start',
	    value: function start() {
	      this.hideScreen(this.getCurrentScreen());
	      this.setCurrentScreen('app');
	      this.showCurrentScreen();
	    }
	  }, {
	    key: 'setCurrentScreen',
	    value: function setCurrentScreen(screen) {
	      this.currentScreen = screen;
	    }
	  }, {
	    key: 'getCurrentScreen',
	    value: function getCurrentScreen() {
	      return this.currentScreen;
	    }
	  }, {
	    key: 'showCurrentScreen',
	    value: function showCurrentScreen() {
	      var screen = this.getCurrentScreen();
	      document.querySelector('.' + screen).classList.add('active');
	      this.setCurrentScreen(screen);
	    }
	  }, {
	    key: 'hideScreen',
	    value: function hideScreen(screen) {
	      var current = screen;
	      document.querySelector('.' + current).classList.remove('active');
	    }
	  }]);
	
	  return Screen;
	}();
	
	exports.default = Screen;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = [{
	  name: 'Bird',
	  file: 'bird',
	  audio: {
	    word: {
	      start: 0,
	      end: 0.757
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Cat',
	  file: 'cat',
	  audio: {
	    word: {
	      start: 0,
	      end: 0.757
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Cow',
	  file: 'cow',
	  audio: {
	    word: {
	      start: 1.674,
	      end: 2.451
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Dog',
	  file: 'dog',
	  audio: {
	    word: {
	      start: 3.367,
	      end: 4.184
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Dolphin',
	  file: 'dolphin',
	  audio: {
	    word: {
	      start: 5.181,
	      end: 6.117
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Duck',
	  file: 'duck',
	  audio: {
	    word: {
	      start: 8.548,
	      end: 9.345
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Elephant',
	  file: 'elephant',
	  audio: {
	    word: {
	      start: 10.202,
	      end: 11.178
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Frog',
	  file: 'frog',
	  audio: {
	    word: {
	      start: 12.015,
	      end: 12.692
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Hen',
	  file: 'hen',
	  audio: {
	    word: {
	      start: 13.669,
	      end: 14.326
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Horse',
	  file: 'horse',
	  audio: {
	    word: {
	      start: 15.362,
	      end: 16.279
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Lion',
	  file: 'lion',
	  audio: {
	    word: {
	      start: 17.116,
	      end: 17.893
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Macaw',
	  file: 'macaw',
	  audio: {
	    word: {
	      start: 18.909,
	      end: 19.846
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Monkey',
	  file: 'monkey',
	  audio: {
	    word: {
	      start: 20.503,
	      end: 21.419
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Mouse',
	  file: 'mouse',
	  audio: {
	    word: {
	      start: 22.256,
	      end: 23.033
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Owl',
	  file: 'owl',
	  audio: {
	    word: {
	      start: 23.870,
	      end: 24.588
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Pig',
	  file: 'pig',
	  audio: {
	    word: {
	      start: 25.539,
	      end: 26.244
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Rooster',
	  file: 'rooster',
	  audio: {
	    word: {
	      start: 25.539,
	      end: 26.244
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Sheep',
	  file: 'sheep',
	  audio: {
	    word: {
	      start: 26.979,
	      end: 27.736
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Snake',
	  file: 'snake',
	  audio: {
	    word: {
	      start: 26.979,
	      end: 27.736
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}, {
	  name: 'Whale',
	  file: 'whale',
	  audio: {
	    word: {
	      start: 28.632,
	      end: 29.450
	    },
	    sound: {
	      start: 0,
	      end: 0
	    }
	  }
	}];

/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Zoo = function () {
	  function Zoo(animals) {
	    _classCallCheck(this, Zoo);
	
	    this.animals = animals || [];
	  }
	
	  _createClass(Zoo, [{
	    key: "getRandomAnimal",
	    value: function getRandomAnimal() {
	      var randomKey = Math.floor(Math.random() * this.animals.length);
	      return this.animals[randomKey];
	    }
	  }]);
	
	  return Zoo;
	}();
	
	exports.default = Zoo;

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNzYyYTVlOWI5MjFkMzhlZWU0ZGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC1zcmMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21vZHVsZXMvYXBwLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL3NjcmVlbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW9kdWxlcy9hbmltYWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9tb2R1bGVzL3pvby5qcyJdLCJuYW1lcyI6WyJteUFwcCIsInNjcmVlbiIsImFuaW1hbHMiLCJ6b28iLCJCdWlsZEFwcCIsIm5hbWUiLCJzdGFydGVkIiwidGh1bWJQYXRoIiwiYXBwIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYW5pbWFsTmFtZSIsImluc3RydWN0aW9ucyIsInRodW1iQm94IiwiYnRuU3RhcnQiLCJidG5TaHVmZmxlIiwicGxheWVyV29yZCIsInBsYXllclNvdW5kIiwib2JqIiwiaW5pdCIsInByb3RvdHlwZSIsImVNYW5hZ2UiLCJtYW5hZ2VJbml0aWFsRXZlbnRzIiwiYmluZCIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdGFydCIsImV2ZW50Iiwia2V5Q29kZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzaHVmZmxlIiwiYW5pbWF0aW9ucyIsInJhbmRvbUFuaW1hdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsInBhdXNlZCIsInBhdXNlIiwiY3VycmVudFRpbWUiLCJyZW1vdmVDaGlsZCIsInRodW1iIiwiY2xhc3NMaXN0IiwiYWRkIiwiYW5pbWFsIiwiZ2V0UmFuZG9tQW5pbWFsIiwidGltZSIsInNldFRpbWVvdXQiLCJjcmVhdGVBbmltYWwiLCJjcmVhdGVFbGVtZW50Iiwib2xkVGh1bWIiLCJzZXRBdHRyaWJ1dGUiLCJmaWxlIiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJyZW1vdmUiLCJvbnRpbWV1cGRhdGUiLCJzZXRXb3JkIiwicGxheSIsInNldFNvdW5kIiwidGltZUluaXQiLCJhdWRpbyIsIndvcmQiLCJ0aW1lRW5kIiwiZW5kIiwiaGFzQ2hpbGROb2RlcyIsImxhc3RDaGlsZCIsImF1ZGlvRm9ybWF0cyIsInR5cGUiLCJmb3JtYXQiLCJmb3JFYWNoIiwiZWxlbWVudCIsImluZGV4Iiwic291bmRFbGVtZW50Iiwic291bmRTcmMiLCJsb2FkIiwiQXBwIiwibW9kdWxlIiwiZXhwb3J0cyIsIlNjcmVlbiIsInN0YXJ0U2NyZWVuIiwic2V0Q3VycmVudFNjcmVlbiIsImhpZGVTY3JlZW4iLCJnZXRDdXJyZW50U2NyZWVuIiwic2hvd0N1cnJlbnRTY3JlZW4iLCJjdXJyZW50U2NyZWVuIiwiY3VycmVudCIsInNvdW5kIiwiWm9vIiwicmFuZG9tS2V5Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7O0FDdENBOzs7Ozs7QUFFQSxFQUFDLFlBQU07QUFDTCxPQUFJQSxRQUFRLG1CQUFJLFlBQUosQ0FBWjtBQUNELEVBRkQsSTs7Ozs7Ozs7QUNTQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLEtBQUlDLFNBQVMsc0JBQWIsQyxDQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQU9BLEtBQU1DLDJCQUFOO0FBQ0EsS0FBTUMsTUFBTSxrQkFBUUQsT0FBUixDQUFaOztBQUVBLFVBQVNFLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXdCO0FBQ3RCLFFBQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNBLFFBQUtDLE9BQUwsR0FBZSxLQUFmO0FBQ0EsUUFBS0MsU0FBTCxHQUFpQixpQkFBakI7O0FBRUEsUUFBS0MsR0FBTCxHQUFXQyxTQUFTQyxhQUFULENBQXVCLFNBQXZCLENBQVg7QUFDQSxRQUFLQyxVQUFMLEdBQWtCRixTQUFTQyxhQUFULENBQXVCLGVBQXZCLENBQWxCO0FBQ0EsUUFBS0UsWUFBTCxHQUFvQkgsU0FBU0MsYUFBVCxDQUF1Qix1QkFBdkIsQ0FBcEI7QUFDQSxRQUFLRyxRQUFMLEdBQWdCSixTQUFTQyxhQUFULENBQXVCLFlBQXZCLENBQWhCO0FBQ0EsUUFBS0ksUUFBTCxHQUFnQkwsU0FBU0MsYUFBVCxDQUF1QixZQUF2QixDQUFoQjtBQUNBLFFBQUtLLFVBQUwsR0FBa0JOLFNBQVNDLGFBQVQsQ0FBdUIsVUFBdkIsQ0FBbEI7QUFDQSxRQUFLTSxVQUFMLEdBQWtCUCxTQUFTQyxhQUFULENBQXVCLGNBQXZCLENBQWxCO0FBQ0EsUUFBS08sV0FBTCxHQUFtQlIsU0FBU0MsYUFBVCxDQUF1QixlQUF2QixDQUFuQjs7QUFFQSxPQUFNUSxNQUFNLElBQVo7QUFDQSxRQUFLQyxJQUFMLENBQVVELEdBQVY7QUFDRDs7QUFFRGQsVUFBU2dCLFNBQVQsR0FBcUI7QUFDbkJELFNBQU0sY0FBQ0QsR0FBRCxFQUFTOztBQUViakIsWUFBT2tCLElBQVA7O0FBRUFELFNBQUlHLE9BQUosR0FBY0gsSUFBSUksbUJBQUosQ0FBd0JDLElBQXhCLFlBQW1DTCxHQUFuQyxDQUFkOztBQUVBTSxZQUFPQyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQ1AsSUFBSUcsT0FBckMsRUFBOEMsS0FBOUM7O0FBRUFILFNBQUlKLFFBQUosQ0FBYVcsZ0JBQWIsQ0FBOEIsT0FBOUIsRUFBdUMsWUFBTTtBQUMzQyxXQUFJLENBQUNQLElBQUlaLE9BQVQsRUFBa0I7QUFDaEJZLGFBQUlRLEtBQUosQ0FBVVIsR0FBVjtBQUNEO0FBQ0YsTUFKRCxFQUlHLEtBSkg7QUFLRCxJQWRrQjs7QUFnQm5CSSx3QkFBcUIsNkJBQUNKLEdBQUQsRUFBUztBQUM1QixTQUFJUyxNQUFNQyxPQUFOLElBQWlCLEVBQXJCLEVBQXlCO0FBQ3ZCLFdBQUksQ0FBQ1YsSUFBSVosT0FBVCxFQUFrQjtBQUNoQlksYUFBSVEsS0FBSixDQUFVUixHQUFWO0FBQ0Q7QUFDRjtBQUNGLElBdEJrQjs7QUF3Qm5CUSxVQUFPLGVBQUNSLEdBQUQsRUFBUztBQUNkakIsWUFBT3lCLEtBQVA7QUFDQVIsU0FBSVosT0FBSixHQUFjLElBQWQ7O0FBRUFrQixZQUFPSyxtQkFBUCxDQUEyQixPQUEzQixFQUFvQ1gsSUFBSUcsT0FBeEMsRUFBaUQsS0FBakQ7O0FBRUFILFNBQUlILFVBQUosQ0FBZVUsZ0JBQWYsQ0FBZ0MsT0FBaEMsRUFBeUMsWUFBTTtBQUM3Q1AsV0FBSVksT0FBSixDQUFZWixHQUFaO0FBQ0QsTUFGRCxFQUVHLEtBRkg7O0FBSUFNLFlBQU9DLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDLFVBQVNFLEtBQVQsRUFBZ0I7QUFDL0MsV0FBSUEsTUFBTUMsT0FBTixJQUFpQixFQUFyQixFQUF5QixDQUV4QixDQUZELE1BRU8sSUFBSUQsTUFBTUMsT0FBTixJQUFpQixFQUFyQixFQUF5QjtBQUM5QlYsYUFBSVksT0FBSixDQUFZWixHQUFaO0FBQ0Q7QUFDRixNQU5ELEVBTUcsS0FOSDtBQU9ELElBekNrQjs7QUEyQ25CWSxZQUFTLGlCQUFDWixHQUFELEVBQVM7QUFDaEIsU0FBSWEsYUFBYSxDQUFDLFNBQUQsRUFBWSxhQUFaLENBQWpCO0FBQ0EsU0FBSUMsa0JBQWtCQyxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsS0FBZ0JKLFdBQVdLLE1BQXRDLENBQXRCOztBQUVBLFNBQUksQ0FBQ2xCLElBQUlGLFVBQUosQ0FBZXFCLE1BQXBCLEVBQTRCO0FBQzFCbkIsV0FBSUYsVUFBSixDQUFlc0IsS0FBZjtBQUNBcEIsV0FBSUYsVUFBSixDQUFldUIsV0FBZixHQUE2QixDQUE3QjtBQUNEOztBQUVELFNBQUk5QixTQUFTQyxhQUFULENBQXVCLHVCQUF2QixLQUFtRCxJQUF2RCxFQUE2RDtBQUMzRFEsV0FBSUwsUUFBSixDQUFhMkIsV0FBYixDQUF5QnRCLElBQUlOLFlBQTdCO0FBQ0Q7O0FBRUQsU0FBSTZCLFFBQVFoQyxTQUFTQyxhQUFULENBQXVCLGVBQXZCLENBQVo7O0FBRUEsU0FBSStCLFNBQVMsSUFBYixFQUFtQjtBQUNqQnZCLFdBQUlMLFFBQUosQ0FBYTJCLFdBQWIsQ0FBeUJDLEtBQXpCO0FBQ0Q7O0FBRUR2QixTQUFJTCxRQUFKLENBQWE2QixTQUFiLENBQXVCQyxHQUF2QixDQUEyQlosV0FBV0MsZUFBWCxDQUEzQjtBQUNBZCxTQUFJUCxVQUFKLENBQWUrQixTQUFmLENBQXlCQyxHQUF6QixDQUE2QixNQUE3Qjs7QUFFQSxTQUFJQyxTQUFTekMsSUFBSTBDLGVBQUosRUFBYjs7QUFFQSxTQUFJQyxPQUFPQyxXQUFXLFlBQU07QUFDMUI3QixXQUFJTCxRQUFKLENBQWFZLGdCQUFiLENBQThCLGNBQTlCLEVBQThDUCxJQUFJOEIsWUFBSixDQUFpQjlCLEdBQWpCLEVBQXNCMEIsTUFBdEIsRUFBOEJiLFVBQTlCLEVBQTBDQyxlQUExQyxDQUE5QyxFQUEwRyxLQUExRztBQUNELE1BRlUsRUFFUixHQUZRLENBQVg7QUFHRCxJQXRFa0I7O0FBd0VuQmdCLGlCQUFjLHNCQUFDOUIsR0FBRCxFQUFNMEIsTUFBTixFQUFjYixVQUFkLEVBQTBCQyxlQUExQixFQUE4QztBQUMxRCxTQUFJUyxRQUFRaEMsU0FBU3dDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBWjs7QUFFQSxTQUFJL0IsSUFBSUwsUUFBSixDQUFhSCxhQUFiLENBQTJCLGVBQTNCLEtBQStDLElBQW5ELEVBQXlEO0FBQ3ZELFdBQUl3QyxXQUFXaEMsSUFBSUwsUUFBSixDQUFhSCxhQUFiLENBQTJCLGVBQTNCLENBQWY7QUFDQVEsV0FBSUwsUUFBSixDQUFhMkIsV0FBYixDQUF5QlUsUUFBekI7QUFDRDs7QUFFRFQsV0FBTVUsWUFBTixDQUFtQixLQUFuQixFQUEwQmpDLElBQUlYLFNBQUosR0FBZ0IsR0FBaEIsR0FBc0JxQyxPQUFPUSxJQUE3QixHQUFvQyxNQUE5RDtBQUNBWCxXQUFNVSxZQUFOLENBQW1CLEtBQW5CLEVBQTBCUCxPQUFPdkMsSUFBakM7QUFDQW9DLFdBQU1VLFlBQU4sQ0FBbUIsT0FBbkIsRUFBNEIsY0FBNUI7O0FBRUFqQyxTQUFJTCxRQUFKLENBQWF3QyxXQUFiLENBQXlCWixLQUF6QjtBQUNBdkIsU0FBSVAsVUFBSixDQUFlMkMsU0FBZixHQUEyQlYsT0FBT3ZDLElBQWxDOztBQUVBYSxTQUFJTCxRQUFKLENBQWE2QixTQUFiLENBQXVCYSxNQUF2QixDQUE4QnhCLFdBQVdDLGVBQVgsQ0FBOUI7QUFDQWQsU0FBSVAsVUFBSixDQUFlK0IsU0FBZixDQUF5QmEsTUFBekIsQ0FBZ0MsTUFBaEM7O0FBRUEsWUFBT3JDLElBQUlGLFVBQUosQ0FBZXdDLFlBQXRCOztBQUVBdEMsU0FBSXVDLE9BQUosQ0FBWXZDLEdBQVosRUFBaUIwQixNQUFqQjtBQUNBMUIsU0FBSUYsVUFBSixDQUFlMEMsSUFBZjs7QUFFQXhDLFNBQUl5QyxRQUFKLENBQWF6QyxHQUFiLEVBQWtCMEIsTUFBbEI7QUFDRCxJQWhHa0I7O0FBa0duQmEsWUFBUyxpQkFBQ3ZDLEdBQUQsRUFBTTBCLE1BQU4sRUFBaUI7QUFDeEIsU0FBSWdCLFdBQVdoQixPQUFPaUIsS0FBUCxDQUFhQyxJQUFiLENBQWtCcEMsS0FBakM7QUFDQSxTQUFJcUMsVUFBVW5CLE9BQU9pQixLQUFQLENBQWFDLElBQWIsQ0FBa0JFLEdBQWhDOztBQUVBOUMsU0FBSUYsVUFBSixDQUFldUIsV0FBZixHQUE2QnFCLFFBQTdCOztBQUVBMUMsU0FBSUYsVUFBSixDQUFld0MsWUFBZixHQUE4QixZQUFNO0FBQ2xDLFdBQUl0QyxJQUFJRixVQUFKLENBQWV1QixXQUFmLEdBQTZCd0IsT0FBakMsRUFBMEM7QUFDeEM3QyxhQUFJRixVQUFKLENBQWVzQixLQUFmO0FBQ0Q7QUFDRixNQUpEO0FBS0QsSUE3R2tCOztBQStHbkJxQixhQUFVLGtCQUFDekMsR0FBRCxFQUFNMEIsTUFBTixFQUFpQjtBQUN6QixZQUFPMUIsSUFBSUQsV0FBSixDQUFnQmdELGFBQWhCLEVBQVAsRUFBd0M7QUFDdEMvQyxXQUFJRCxXQUFKLENBQWdCdUIsV0FBaEIsQ0FBNEJ0QixJQUFJRCxXQUFKLENBQWdCaUQsU0FBNUM7QUFDRDs7QUFFRCxTQUFNQyxlQUFlLENBQ25CO0FBQ0VDLGFBQU0sV0FEUjtBQUVFQyxlQUFRO0FBRlYsTUFEbUIsRUFLbkI7QUFDRUQsYUFBTSxXQURSO0FBRUVDLGVBQVE7QUFGVixNQUxtQixDQUFyQjs7QUFXQUYsa0JBQWFHLE9BQWIsQ0FBcUIsVUFBQ0MsT0FBRCxFQUFVQyxLQUFWLEVBQW9CO0FBQ3ZDLFdBQUlDLGVBQWVoRSxTQUFTd0MsYUFBVCxDQUF1QixRQUF2QixDQUFuQjtBQUNBLFdBQUl5QiwrQkFBNkI5QixPQUFPUSxJQUFwQyxTQUE0Q21CLFFBQVFGLE1BQXhEOztBQUVBSSxvQkFBYXRCLFlBQWIsQ0FBMEIsS0FBMUIsRUFBaUN1QixRQUFqQztBQUNBRCxvQkFBYXRCLFlBQWIsQ0FBMEIsTUFBMUIsRUFBa0NvQixRQUFRSCxJQUExQzs7QUFFQWxELFdBQUlELFdBQUosQ0FBZ0JvQyxXQUFoQixDQUE0Qm9CLFlBQTVCOztBQUVBdkQsV0FBSUQsV0FBSixDQUFnQjBELElBQWhCO0FBQ0QsTUFWRDtBQVdEO0FBMUlrQixFQUFyQjs7QUE2SUEsVUFBU0MsR0FBVCxDQUFhdkUsSUFBYixFQUFtQjtBQUNqQixVQUFPLElBQUlELFFBQUosQ0FBYUMsSUFBYixDQUFQO0FBQ0Q7O0FBRUR3RSxRQUFPQyxPQUFQLEdBQWlCRixHQUFqQixDOzs7Ozs7Ozs7Ozs7Ozs7O0tDdExxQkcsTTtBQUVuQixxQkFBYztBQUFBOztBQUNaLFVBQUtDLFdBQUwsR0FBbUIsT0FBbkI7QUFDRDs7Ozs0QkFFTTtBQUNMLFlBQUtDLGdCQUFMLENBQXNCLEtBQUtELFdBQTNCO0FBQ0F2RSxnQkFBU0MsYUFBVCxDQUF1QixNQUFNLEtBQUtzRSxXQUFsQyxFQUErQ3RDLFNBQS9DLENBQXlEQyxHQUF6RCxDQUE2RCxRQUE3RDtBQUNEOzs7NkJBRU87QUFDTixZQUFLdUMsVUFBTCxDQUFnQixLQUFLQyxnQkFBTCxFQUFoQjtBQUNBLFlBQUtGLGdCQUFMLENBQXNCLEtBQXRCO0FBQ0EsWUFBS0csaUJBQUw7QUFDRDs7O3NDQUVnQm5GLE0sRUFBUTtBQUN2QixZQUFLb0YsYUFBTCxHQUFxQnBGLE1BQXJCO0FBQ0Q7Ozt3Q0FFa0I7QUFDakIsY0FBTyxLQUFLb0YsYUFBWjtBQUNEOzs7eUNBRW1CO0FBQ2xCLFdBQUlwRixTQUFTLEtBQUtrRixnQkFBTCxFQUFiO0FBQ0ExRSxnQkFBU0MsYUFBVCxDQUF1QixNQUFNVCxNQUE3QixFQUFxQ3lDLFNBQXJDLENBQStDQyxHQUEvQyxDQUFtRCxRQUFuRDtBQUNBLFlBQUtzQyxnQkFBTCxDQUFzQmhGLE1BQXRCO0FBQ0Q7OztnQ0FFVUEsTSxFQUFRO0FBQ2pCLFdBQUlxRixVQUFVckYsTUFBZDtBQUNBUSxnQkFBU0MsYUFBVCxDQUF1QixNQUFNNEUsT0FBN0IsRUFBc0M1QyxTQUF0QyxDQUFnRGEsTUFBaEQsQ0FBdUQsUUFBdkQ7QUFDRDs7Ozs7O21CQWxDa0J3QixNOzs7Ozs7OztBQ0FyQkYsUUFBT0MsT0FBUCxHQUFpQixDQUNmO0FBQ0V6RSxTQUFNLE1BRFI7QUFFRStDLFNBQU0sTUFGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sQ0FESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQURlLEVBZWY7QUFDRTNELFNBQU0sS0FEUjtBQUVFK0MsU0FBTSxLQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxDQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBZmUsRUE2QmY7QUFDRTNELFNBQU0sS0FEUjtBQUVFK0MsU0FBTSxLQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxLQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBN0JlLEVBMkNmO0FBQ0UzRCxTQUFNLEtBRFI7QUFFRStDLFNBQU0sS0FGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sS0FESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQTNDZSxFQXlEZjtBQUNFM0QsU0FBTSxTQURSO0FBRUUrQyxTQUFNLFNBRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLEtBREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUF6RGUsRUF1RWY7QUFDRTNELFNBQU0sTUFEUjtBQUVFK0MsU0FBTSxNQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxLQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBdkVlLEVBcUZmO0FBQ0UzRCxTQUFNLFVBRFI7QUFFRStDLFNBQU0sVUFGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sTUFESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQXJGZSxFQW1HZjtBQUNFM0QsU0FBTSxNQURSO0FBRUUrQyxTQUFNLE1BRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLE1BREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUFuR2UsRUFpSGY7QUFDRTNELFNBQU0sS0FEUjtBQUVFK0MsU0FBTSxLQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxNQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBakhlLEVBK0hmO0FBQ0UzRCxTQUFNLE9BRFI7QUFFRStDLFNBQU0sT0FGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sTUFESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQS9IZSxFQTZJZjtBQUNFM0QsU0FBTSxNQURSO0FBRUUrQyxTQUFNLE1BRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLE1BREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUE3SWUsRUEySmY7QUFDRTNELFNBQU0sT0FEUjtBQUVFK0MsU0FBTSxPQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxNQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBM0plLEVBeUtmO0FBQ0UzRCxTQUFNLFFBRFI7QUFFRStDLFNBQU0sUUFGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sTUFESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQXpLZSxFQXVMZjtBQUNFM0QsU0FBTSxPQURSO0FBRUUrQyxTQUFNLE9BRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLE1BREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUF2TGUsRUFxTWY7QUFDRTNELFNBQU0sS0FEUjtBQUVFK0MsU0FBTSxLQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxNQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBck1lLEVBbU5mO0FBQ0UzRCxTQUFNLEtBRFI7QUFFRStDLFNBQU0sS0FGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sTUFESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQW5OZSxFQWlPZjtBQUNFM0QsU0FBTSxTQURSO0FBRUUrQyxTQUFNLFNBRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLE1BREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUFqT2UsRUErT2Y7QUFDRTNELFNBQU0sT0FEUjtBQUVFK0MsU0FBTSxPQUZSO0FBR0VTLFVBQU87QUFDTEMsV0FBTTtBQUNKcEMsY0FBTyxNQURIO0FBRUpzQyxZQUFLO0FBRkQsTUFERDtBQUtMdUIsWUFBTztBQUNMN0QsY0FBTyxDQURGO0FBRUxzQyxZQUFLO0FBRkE7QUFMRjtBQUhULEVBL09lLEVBNlBmO0FBQ0UzRCxTQUFNLE9BRFI7QUFFRStDLFNBQU0sT0FGUjtBQUdFUyxVQUFPO0FBQ0xDLFdBQU07QUFDSnBDLGNBQU8sTUFESDtBQUVKc0MsWUFBSztBQUZELE1BREQ7QUFLTHVCLFlBQU87QUFDTDdELGNBQU8sQ0FERjtBQUVMc0MsWUFBSztBQUZBO0FBTEY7QUFIVCxFQTdQZSxFQTJRZjtBQUNFM0QsU0FBTSxPQURSO0FBRUUrQyxTQUFNLE9BRlI7QUFHRVMsVUFBTztBQUNMQyxXQUFNO0FBQ0pwQyxjQUFPLE1BREg7QUFFSnNDLFlBQUs7QUFGRCxNQUREO0FBS0x1QixZQUFPO0FBQ0w3RCxjQUFPLENBREY7QUFFTHNDLFlBQUs7QUFGQTtBQUxGO0FBSFQsRUEzUWUsQ0FBakIsQzs7Ozs7Ozs7Ozs7Ozs7OztLQ0FxQndCLEc7QUFDbkIsZ0JBQVl0RixPQUFaLEVBQXFCO0FBQUE7O0FBQ25CLFVBQUtBLE9BQUwsR0FBZUEsV0FBVyxFQUExQjtBQUNEOzs7O3VDQUVpQjtBQUNoQixXQUFJdUYsWUFBWXhELEtBQUtDLEtBQUwsQ0FBV0QsS0FBS0UsTUFBTCxLQUFnQixLQUFLakMsT0FBTCxDQUFha0MsTUFBeEMsQ0FBaEI7QUFDQSxjQUFPLEtBQUtsQyxPQUFMLENBQWF1RixTQUFiLENBQVA7QUFDRDs7Ozs7O21CQVJrQkQsRyIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNzYyYTVlOWI5MjFkMzhlZWU0ZGUiLCJpbXBvcnQgQXBwIGZyb20gJy4vbW9kdWxlcy9hcHAnXG5cbigoKSA9PiB7XG4gIGxldCBteUFwcCA9IEFwcCgnUGV0IFNvdW5kcycpXG59KSgpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvYXBwLXNyYy5qcyIsIi8vIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4vLyAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCcvc3cuanMnKVxuLy8gICAudGhlbihmdW5jdGlvbihyZWcpIHtcbi8vICAgICAvLyByZWdpc3RyYXRpb24gd29ya2VkXG4vLyAgICAgY29uc29sZS5sb2coJ1JlZ2lzdHJhdGlvbiBzdWNjZWVkZWQuIFNjb3BlIGlzICcgKyByZWcuc2NvcGUpO1xuLy8gICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuLy8gICAgIC8vIHJlZ2lzdHJhdGlvbiBmYWlsZWRcbi8vICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGZhaWxlZCB3aXRoICcgKyBlcnJvcik7XG4vLyAgIH0pO1xuLy8gfVxuXG5pbXBvcnQgU2NyZWVuIGZyb20gXCIuL3NjcmVlblwiXG5pbXBvcnQgQW5pbWFscyBmcm9tIFwiLi9hbmltYWxzXCJcbmltcG9ydCBab28gZnJvbSBcIi4vem9vXCJcblxubGV0IHNjcmVlbiA9IG5ldyBTY3JlZW5cbmNvbnN0IGFuaW1hbHMgPSBBbmltYWxzXG5jb25zdCB6b28gPSBuZXcgWm9vKGFuaW1hbHMpXG5cbmZ1bmN0aW9uIEJ1aWxkQXBwKG5hbWUpIHtcbiAgdGhpcy5uYW1lID0gbmFtZTtcbiAgdGhpcy5zdGFydGVkID0gZmFsc2VcbiAgdGhpcy50aHVtYlBhdGggPSAnL2ltYWdlcy9hbmltYWxzJ1xuXG4gIHRoaXMuYXBwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFuaW1hbCcpXG4gIHRoaXMuYW5pbWFsTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwgLm5hbWUnKVxuICB0aGlzLmluc3RydWN0aW9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwgLmluc3RydWN0aW9ucycpXG4gIHRoaXMudGh1bWJCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGh1bWItYm94JylcbiAgdGhpcy5idG5TdGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFydC1hcHAnKVxuICB0aGlzLmJ0blNodWZmbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2h1ZmZsZScpXG4gIHRoaXMucGxheWVyV29yZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGF5ZXItd29yZCcpXG4gIHRoaXMucGxheWVyU291bmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGxheWVyLXNvdW5kJylcblxuICBjb25zdCBvYmogPSB0aGlzXG4gIHRoaXMuaW5pdChvYmopXG59XG5cbkJ1aWxkQXBwLnByb3RvdHlwZSA9IHtcbiAgaW5pdDogKG9iaikgPT4ge1xuXG4gICAgc2NyZWVuLmluaXQoKVxuXG4gICAgb2JqLmVNYW5hZ2UgPSBvYmoubWFuYWdlSW5pdGlhbEV2ZW50cy5iaW5kKHRoaXMsIG9iailcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIG9iai5lTWFuYWdlLCBmYWxzZSlcblxuICAgIG9iai5idG5TdGFydC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmICghb2JqLnN0YXJ0ZWQpIHtcbiAgICAgICAgb2JqLnN0YXJ0KG9iailcbiAgICAgIH1cbiAgICB9LCBmYWxzZSlcbiAgfSxcblxuICBtYW5hZ2VJbml0aWFsRXZlbnRzOiAob2JqKSA9PiB7XG4gICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgIGlmICghb2JqLnN0YXJ0ZWQpIHtcbiAgICAgICAgb2JqLnN0YXJ0KG9iailcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgc3RhcnQ6IChvYmopID0+IHtcbiAgICBzY3JlZW4uc3RhcnQoKVxuICAgIG9iai5zdGFydGVkID0gdHJ1ZVxuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgb2JqLmVNYW5hZ2UsIGZhbHNlKVxuXG4gICAgb2JqLmJ0blNodWZmbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBvYmouc2h1ZmZsZShvYmopXG4gICAgfSwgZmFsc2UpXG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMzIpIHtcbiAgICAgICAgXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gODMpIHtcbiAgICAgICAgb2JqLnNodWZmbGUob2JqKVxuICAgICAgfVxuICAgIH0sIGZhbHNlKVxuICB9LFxuXG4gIHNodWZmbGU6IChvYmopID0+IHtcbiAgICBsZXQgYW5pbWF0aW9ucyA9IFsnc2h1ZmZsZScsICdzaHVmZmxlLWFsdCddXG4gICAgbGV0IHJhbmRvbUFuaW1hdGlvbiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFuaW1hdGlvbnMubGVuZ3RoKVxuXG4gICAgaWYgKCFvYmoucGxheWVyV29yZC5wYXVzZWQpIHtcbiAgICAgIG9iai5wbGF5ZXJXb3JkLnBhdXNlKClcbiAgICAgIG9iai5wbGF5ZXJXb3JkLmN1cnJlbnRUaW1lID0gMFxuICAgIH1cblxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW5pbWFsIC5pbnN0cnVjdGlvbnMnKSAhPSBudWxsKSB7XG4gICAgICBvYmoudGh1bWJCb3gucmVtb3ZlQ2hpbGQob2JqLmluc3RydWN0aW9ucylcbiAgICB9XG5cbiAgICBsZXQgdGh1bWIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYW5pbWFsLXRodW1iJylcblxuICAgIGlmICh0aHVtYiAhPSBudWxsKSB7XG4gICAgICBvYmoudGh1bWJCb3gucmVtb3ZlQ2hpbGQodGh1bWIpXG4gICAgfVxuXG4gICAgb2JqLnRodW1iQm94LmNsYXNzTGlzdC5hZGQoYW5pbWF0aW9uc1tyYW5kb21BbmltYXRpb25dKVxuICAgIG9iai5hbmltYWxOYW1lLmNsYXNzTGlzdC5hZGQoJ2ZhZGUnKVxuXG4gICAgbGV0IGFuaW1hbCA9IHpvby5nZXRSYW5kb21BbmltYWwoKVxuXG4gICAgbGV0IHRpbWUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIG9iai50aHVtYkJveC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBvYmouY3JlYXRlQW5pbWFsKG9iaiwgYW5pbWFsLCBhbmltYXRpb25zLCByYW5kb21BbmltYXRpb24pLCBmYWxzZSk7XG4gICAgfSwgMzAwKVxuICB9LFxuXG4gIGNyZWF0ZUFuaW1hbDogKG9iaiwgYW5pbWFsLCBhbmltYXRpb25zLCByYW5kb21BbmltYXRpb24pID0+IHtcbiAgICBsZXQgdGh1bWIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKVxuXG4gICAgaWYgKG9iai50aHVtYkJveC5xdWVyeVNlbGVjdG9yKCcuYW5pbWFsLXRodW1iJykgIT0gbnVsbCkge1xuICAgICAgbGV0IG9sZFRodW1iID0gb2JqLnRodW1iQm94LnF1ZXJ5U2VsZWN0b3IoJy5hbmltYWwtdGh1bWInKVxuICAgICAgb2JqLnRodW1iQm94LnJlbW92ZUNoaWxkKG9sZFRodW1iKVxuICAgIH1cbiAgICBcbiAgICB0aHVtYi5zZXRBdHRyaWJ1dGUoJ3NyYycsIG9iai50aHVtYlBhdGggKyAnLycgKyBhbmltYWwuZmlsZSArICcuc3ZnJylcbiAgICB0aHVtYi5zZXRBdHRyaWJ1dGUoJ2FsdCcsIGFuaW1hbC5uYW1lKVxuICAgIHRodW1iLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnYW5pbWFsLXRodW1iJylcblxuICAgIG9iai50aHVtYkJveC5hcHBlbmRDaGlsZCh0aHVtYilcbiAgICBvYmouYW5pbWFsTmFtZS5pbm5lckhUTUwgPSBhbmltYWwubmFtZVxuXG4gICAgb2JqLnRodW1iQm94LmNsYXNzTGlzdC5yZW1vdmUoYW5pbWF0aW9uc1tyYW5kb21BbmltYXRpb25dKVxuICAgIG9iai5hbmltYWxOYW1lLmNsYXNzTGlzdC5yZW1vdmUoJ2ZhZGUnKVxuXG4gICAgZGVsZXRlIG9iai5wbGF5ZXJXb3JkLm9udGltZXVwZGF0ZVxuXG4gICAgb2JqLnNldFdvcmQob2JqLCBhbmltYWwpXG4gICAgb2JqLnBsYXllcldvcmQucGxheSgpXG5cbiAgICBvYmouc2V0U291bmQob2JqLCBhbmltYWwpXG4gIH0sXG5cbiAgc2V0V29yZDogKG9iaiwgYW5pbWFsKSA9PiB7XG4gICAgbGV0IHRpbWVJbml0ID0gYW5pbWFsLmF1ZGlvLndvcmQuc3RhcnRcbiAgICBsZXQgdGltZUVuZCA9IGFuaW1hbC5hdWRpby53b3JkLmVuZFxuXG4gICAgb2JqLnBsYXllcldvcmQuY3VycmVudFRpbWUgPSB0aW1lSW5pdFxuXG4gICAgb2JqLnBsYXllcldvcmQub250aW1ldXBkYXRlID0gKCkgPT4ge1xuICAgICAgaWYgKG9iai5wbGF5ZXJXb3JkLmN1cnJlbnRUaW1lID4gdGltZUVuZCkge1xuICAgICAgICBvYmoucGxheWVyV29yZC5wYXVzZSgpXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHNldFNvdW5kOiAob2JqLCBhbmltYWwpID0+IHtcbiAgICB3aGlsZSAob2JqLnBsYXllclNvdW5kLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgb2JqLnBsYXllclNvdW5kLnJlbW92ZUNoaWxkKG9iai5wbGF5ZXJTb3VuZC5sYXN0Q2hpbGQpXG4gICAgfVxuXG4gICAgY29uc3QgYXVkaW9Gb3JtYXRzID0gW1xuICAgICAge1xuICAgICAgICB0eXBlOiAnYXVkaW8vbXAzJyxcbiAgICAgICAgZm9ybWF0OiAnbXAzJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2F1ZGlvL29nZycsXG4gICAgICAgIGZvcm1hdDogJ29nZydcbiAgICAgIH1cbiAgICBdXG4gICAgXG4gICAgYXVkaW9Gb3JtYXRzLmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICBsZXQgc291bmRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJylcbiAgICAgIGxldCBzb3VuZFNyYyA9IGAvYXVkaW8vYW5pbWFscy8ke2FuaW1hbC5maWxlfS4ke2VsZW1lbnQuZm9ybWF0fWBcblxuICAgICAgc291bmRFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3JjJywgc291bmRTcmMpXG4gICAgICBzb3VuZEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0eXBlJywgZWxlbWVudC50eXBlKVxuXG4gICAgICBvYmoucGxheWVyU291bmQuYXBwZW5kQ2hpbGQoc291bmRFbGVtZW50KVxuXG4gICAgICBvYmoucGxheWVyU291bmQubG9hZCgpXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gQXBwKG5hbWUpIHtcbiAgcmV0dXJuIG5ldyBCdWlsZEFwcChuYW1lKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbW9kdWxlcy9hcHAuanMiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY3JlZW4ge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhcnRTY3JlZW4gPSAnaW50cm8nXG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc2V0Q3VycmVudFNjcmVlbih0aGlzLnN0YXJ0U2NyZWVuKVxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgdGhpcy5zdGFydFNjcmVlbikuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgfVxuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuaGlkZVNjcmVlbih0aGlzLmdldEN1cnJlbnRTY3JlZW4oKSlcbiAgICB0aGlzLnNldEN1cnJlbnRTY3JlZW4oJ2FwcCcpXG4gICAgdGhpcy5zaG93Q3VycmVudFNjcmVlbigpXG4gIH1cblxuICBzZXRDdXJyZW50U2NyZWVuKHNjcmVlbikge1xuICAgIHRoaXMuY3VycmVudFNjcmVlbiA9IHNjcmVlblxuICB9XG5cbiAgZ2V0Q3VycmVudFNjcmVlbigpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50U2NyZWVuXG4gIH1cblxuICBzaG93Q3VycmVudFNjcmVlbigpIHtcbiAgICBsZXQgc2NyZWVuID0gdGhpcy5nZXRDdXJyZW50U2NyZWVuKClcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHNjcmVlbikuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcbiAgICB0aGlzLnNldEN1cnJlbnRTY3JlZW4oc2NyZWVuKVxuICB9XG5cbiAgaGlkZVNjcmVlbihzY3JlZW4pIHtcbiAgICBsZXQgY3VycmVudCA9IHNjcmVlblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nICsgY3VycmVudCkuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJylcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbW9kdWxlcy9zY3JlZW4uanMiLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAge1xuICAgIG5hbWU6ICdCaXJkJyxcbiAgICBmaWxlOiAnYmlyZCcsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMC43NTdcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ0NhdCcsXG4gICAgZmlsZTogJ2NhdCcsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMC43NTdcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ0NvdycsXG4gICAgZmlsZTogJ2NvdycsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDEuNjc0LFxuICAgICAgICBlbmQ6IDIuNDUxXG4gICAgICB9LFxuICAgICAgc291bmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdEb2cnLFxuICAgIGZpbGU6ICdkb2cnLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiAzLjM2NyxcbiAgICAgICAgZW5kOiA0LjE4NFxuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnRG9scGhpbicsXG4gICAgZmlsZTogJ2RvbHBoaW4nLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiA1LjE4MSxcbiAgICAgICAgZW5kOiA2LjExN1xuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnRHVjaycsXG4gICAgZmlsZTogJ2R1Y2snLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiA4LjU0OCxcbiAgICAgICAgZW5kOiA5LjM0NVxuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnRWxlcGhhbnQnLFxuICAgIGZpbGU6ICdlbGVwaGFudCcsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDEwLjIwMixcbiAgICAgICAgZW5kOiAxMS4xNzhcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ0Zyb2cnLFxuICAgIGZpbGU6ICdmcm9nJyxcbiAgICBhdWRpbzoge1xuICAgICAgd29yZDoge1xuICAgICAgICBzdGFydDogMTIuMDE1LFxuICAgICAgICBlbmQ6IDEyLjY5MlxuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnSGVuJyxcbiAgICBmaWxlOiAnaGVuJyxcbiAgICBhdWRpbzoge1xuICAgICAgd29yZDoge1xuICAgICAgICBzdGFydDogMTMuNjY5LFxuICAgICAgICBlbmQ6IDE0LjMyNlxuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnSG9yc2UnLFxuICAgIGZpbGU6ICdob3JzZScsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDE1LjM2MixcbiAgICAgICAgZW5kOiAxNi4yNzlcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ0xpb24nLFxuICAgIGZpbGU6ICdsaW9uJyxcbiAgICBhdWRpbzoge1xuICAgICAgd29yZDoge1xuICAgICAgICBzdGFydDogMTcuMTE2LFxuICAgICAgICBlbmQ6IDE3Ljg5M1xuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnTWFjYXcnLFxuICAgIGZpbGU6ICdtYWNhdycsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDE4LjkwOSxcbiAgICAgICAgZW5kOiAxOS44NDZcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ01vbmtleScsXG4gICAgZmlsZTogJ21vbmtleScsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDIwLjUwMyxcbiAgICAgICAgZW5kOiAyMS40MTlcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ01vdXNlJyxcbiAgICBmaWxlOiAnbW91c2UnLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiAyMi4yNTYsXG4gICAgICAgIGVuZDogMjMuMDMzXG4gICAgICB9LFxuICAgICAgc291bmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdPd2wnLFxuICAgIGZpbGU6ICdvd2wnLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiAyMy44NzAsXG4gICAgICAgIGVuZDogMjQuNTg4XG4gICAgICB9LFxuICAgICAgc291bmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdQaWcnLFxuICAgIGZpbGU6ICdwaWcnLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiAyNS41MzksXG4gICAgICAgIGVuZDogMjYuMjQ0XG4gICAgICB9LFxuICAgICAgc291bmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdSb29zdGVyJyxcbiAgICBmaWxlOiAncm9vc3RlcicsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDI1LjUzOSxcbiAgICAgICAgZW5kOiAyNi4yNDRcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgbmFtZTogJ1NoZWVwJyxcbiAgICBmaWxlOiAnc2hlZXAnLFxuICAgIGF1ZGlvOiB7XG4gICAgICB3b3JkOiB7XG4gICAgICAgIHN0YXJ0OiAyNi45NzksXG4gICAgICAgIGVuZDogMjcuNzM2XG4gICAgICB9LFxuICAgICAgc291bmQ6IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogMFxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAge1xuICAgIG5hbWU6ICdTbmFrZScsXG4gICAgZmlsZTogJ3NuYWtlJyxcbiAgICBhdWRpbzoge1xuICAgICAgd29yZDoge1xuICAgICAgICBzdGFydDogMjYuOTc5LFxuICAgICAgICBlbmQ6IDI3LjczNlxuICAgICAgfSxcbiAgICAgIHNvdW5kOiB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBuYW1lOiAnV2hhbGUnLFxuICAgIGZpbGU6ICd3aGFsZScsXG4gICAgYXVkaW86IHtcbiAgICAgIHdvcmQ6IHtcbiAgICAgICAgc3RhcnQ6IDI4LjYzMixcbiAgICAgICAgZW5kOiAyOS40NTBcbiAgICAgIH0sXG4gICAgICBzb3VuZDoge1xuICAgICAgICBzdGFydDogMCxcbiAgICAgICAgZW5kOiAwXG4gICAgICB9XG4gICAgfVxuICB9XG5dXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbW9kdWxlcy9hbmltYWxzLmpzIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgWm9vIHtcbiAgY29uc3RydWN0b3IoYW5pbWFscykge1xuICAgIHRoaXMuYW5pbWFscyA9IGFuaW1hbHMgfHwgW11cbiAgfVxuXG4gIGdldFJhbmRvbUFuaW1hbCgpIHtcbiAgICBsZXQgcmFuZG9tS2V5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5hbmltYWxzLmxlbmd0aClcbiAgICByZXR1cm4gdGhpcy5hbmltYWxzW3JhbmRvbUtleV1cbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21vZHVsZXMvem9vLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==